#include "stdafx.h"
#include "ascii.h"

std::string hex[128] =
{
	"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f",
	"10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f",
	"20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f",
	"30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f",
	"40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f",
	"50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f",
	"60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f",
	"70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f",
};

std::string binary[128] =
{
	"0000000", "0000001", "0000010", "0000011", "0000100", "0000101", "0000110", "0000111",
	"0001000", "0001001", "0001010", "0001011", "0001100", "0001101", "0001110", "0001111",
	"0010000", "0010001", "0010010", "0010011", "0010100", "0010101", "0010110", "0010111",
	"0011000", "0011001", "0011010", "0011011", "0011100", "0011101", "0011110", "0011111",
	"0100000", "0100001", "0100010", "0100011", "0100100", "0100101", "0100110", "0100111",
	"0101000", "0101001", "0101010", "0101011", "0101100", "0101101", "0101110", "0101111",
	"0110000", "0110001", "0110010", "0110011", "0110100", "0110101", "0110110", "0110111",
	"0111000", "0111001", "0111010", "0111011", "0111100", "0111101", "0111110", "0111111",
	"1000000", "1000001", "1000010", "1000011", "1000100", "1000101", "1000110", "1000111",
	"1001000", "1001001", "1001010", "1001011", "1001100", "1001101", "1001110", "1001111",
	"1010000", "1010001", "1010010", "1010011", "1010100", "1010101", "1010110", "1010111",
	"1011000", "1011001", "1011010", "1011011", "1011100", "1011101", "1011110", "1011111",
	"1100000", "1100001", "1100010", "1100011", "1100100", "1100101", "1100110", "1100111",
	"1101000", "1101001", "1101010", "1101011", "1101100", "1101101", "1101110", "1101111",
	"1110000", "1110001", "1110010", "1110011", "1110100", "1110101", "1110110", "1110111",
	"1111000", "1111001", "1111010", "1111011", "1111100", "1111101", "1111110", "1111111",
};

std::string hex_to_binary(std::string hex_)
{
	std::string binary_ = "";
	std::string temp = "";
	for (int hex_index = 0; hex_index < hex_.length(); hex_index+=2)
	{
		temp = hex_.substr(hex_index, 2);
		for (int index = 0; index < 128; index++)
		{
			if (temp == hex[index])
			{
				binary_ = binary_ + binary[index];
			}
		}
		
	}
	return binary_;

	
	std::cout << "ERR IN ascii.h - Failed to match hex" << "\n";
	return "-1";
}

unsigned binary_to_decimal(std::string binary_)
{
	unsigned decimal = 0;
		
	for (int digit = 0; digit < binary_.length(); digit++)
	{
		if (binary_.at(binary_.length() - (digit + 1)) == *"1")
		{
			decimal += static_cast<int>(pow(2, digit));
		}
	}
	return decimal;
}